(()=>{"use strict";var __webpack_modules__={659:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P6:()=>compileFile});var _rollup_browser__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(61),_rollup_browser__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_rollup_browser__WEBPACK_IMPORTED_MODULE_0__),_babel_standalone__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(359),_babel_standalone__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_babel_standalone__WEBPACK_IMPORTED_MODULE_1__),typescript__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(270),typescript__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(typescript__WEBPACK_IMPORTED_MODULE_2__),_globals__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(888);async function compileFile(e){try{var n=await _rollup_browser__WEBPACK_IMPORTED_MODULE_0__.rollup({input:e.path(),plugins:[{name:"loader",resolveId:(e,n)=>resolveModule(e,n),load:async e=>await loadModule(e)}]}),t=(await n.generate({format:"es"})).output[0].code,a=prompt("Output Filepath:",e.path()+".js");(await _globals__WEBPACK_IMPORTED_MODULE_3__.ZP.rootFolder.newFile(a)).setText(t)}catch(e){console.log(e)}}const compileButton=document.getElementById("compileButton");async function compile(){try{compileButton.children[0].classList.add("fa-spin"),window.config={};var configJS=await _globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files["config.js"].getText();eval(configJS);var bundle=await _rollup_browser__WEBPACK_IMPORTED_MODULE_0__.rollup({...window.config.rollup,plugins:[{name:"loader",resolveId:(e,n)=>resolveModule(e,n),load:async e=>await loadModule(e,window.config)}]}),result=await bundle.generate({format:"es",...window.config.outputOptions}),src=result.output[0].code,code=compileJavascript(src,window.config.babel),outputFilePath=window.config.outputPath,outputFile=await _globals__WEBPACK_IMPORTED_MODULE_3__.ZP.rootFolder.newFile(outputFilePath);outputFile.setText(code)}catch(e){console.log(e)}compileButton.children[0].classList.remove("fa-spin"),compileButton.classList.remove("orange")}function resolveModule(e,n){if("https://"===e.slice(0,8))return e;var t=n?n.split("/"):[""],a=e.split("/"),i=a.findLastIndex((e=>".."===e));if(i>=0){for(;i>=0;i--)a[i]=t[i];t=[""]}for("."===a[0]&&(a[0]=t.slice(0,t.length-1).join("/"),t=[""]),e=a.join("/");t.length>0;){t.pop();let n=t.join("/")+(t.length>0?"/":"")+e;if(_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files.hasOwnProperty(n))return n;if(_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files.hasOwnProperty(n+".ts"))return n+".ts";if(_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files.hasOwnProperty(n+".js"))return n+".js";if(_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files.hasOwnProperty(n+".css"))return n+".css";if(_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files.hasOwnProperty(n+".scss"))return n+".scss"}}async function loadModule(e,n){if("https://"===e.slice(0,8)){var t=await fetch(e),a=await t.text(),i=t.headers.get("Content-Type");if(i.includes("javascript"))var s="javascript";i.includes("css")&&(s="css")}else{var o=_globals__WEBPACK_IMPORTED_MODULE_3__.ZP.files[e];a=await o.getText(),s=o.language()}switch(s){case"typescript":case"javascript":return compileTypescript(a,n?.typescript);case"css":return compileCSS(a);default:return""}}function compileTypescript(e,n){try{return typescript__WEBPACK_IMPORTED_MODULE_2__.transpile(e,{jsx:typescript__WEBPACK_IMPORTED_MODULE_2__.JsxEmit.React,module:typescript__WEBPACK_IMPORTED_MODULE_2__.ModuleKind.ESNext,target:typescript__WEBPACK_IMPORTED_MODULE_2__.ScriptTarget.Latest,...n})}catch(e){console.log(e)}}function compileJavascript(e,n){try{return _babel_standalone__WEBPACK_IMPORTED_MODULE_1__.transform(e,{presets:["env"],sourceType:"unambiguous",filename:"file.ts",...n}).code}catch(e){console.log(e)}}function compileCSS(e){return`(function(){\n      const style = document.createElement('style');\n      style.innerHTML= ${JSON.stringify(minifyCSS(e))};\n      document.head.appendChild(style);\n    })();`}function minifyCSS(e){return(e=(e=(e=(e=(e=e.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\/|[\r\n\t]+/g,"")).replace(/ {2,}/g," ")).replace(/ ([{:}]) /g,"$1")).replace(/([{:}]) /g,"$1")).replace(/([;,]) /g,"$1")).replace(/ !/g,"!")}compileButton.addEventListener("click",(async function(){await compile()}))},888:(e,n,t)=>{t.d(n,{ZP:()=>a});const a={files:{},rootFolder:void 0,leftActiveFile:void 0,rightActiveFile:void 0,dragFile:void 0}},359:e=>{e.exports=Babel},61:e=>{e.exports=rollup},270:e=>{e.exports=ts}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var __webpack_exports__={};(()=>{const e=document.getElementById("resizer"),n=document.getElementById("sidebar"),t=document.getElementById("container");function a(e){const a=`${e.x}px`;n.style.width=a,t.style.width=document.body.offsetWidth-e.x+"px"}e.addEventListener("mousedown",(e=>{document.addEventListener("mousemove",a,!1),document.addEventListener("mouseup",(()=>{document.removeEventListener("mousemove",a,!1)}),!1)})),a({x:250}),document.getElementById("npmButton").addEventListener("click",(async function(){try{const a=document.getElementById("npmPackageName"),i=await fetch(`https://registry.npmjs.org/${a.value}/latest`),s=await i.json();e=s.dist.tarball,n=s.name,t=document.createElement("a"),document.body.appendChild(t),t.style.display="none",t.href=e,t.download=n,t.target="_blank",t.click(),t.remove()}catch(e){console.log(e)}var e,n,t}));var i=__webpack_require__(888);const s=monaco;s.editor.setTheme("vs-dark"),s.languages.typescript.typescriptDefaults.setEagerModelSync(!0),s.languages.typescript.javascriptDefaults.setEagerModelSync(!0),s.languages.typescript.typescriptDefaults.setCompilerOptions({target:s.languages.typescript.ScriptTarget.Latest,allowNonTsExtensions:!0,moduleResolution:s.languages.typescript.ModuleResolutionKind.NodeJs,module:s.languages.typescript.ModuleKind.CommonJS,noEmit:!0,esModuleInterop:!0,jsx:s.languages.typescript.JsxEmit.React,reactNamespace:"React",allowJs:!0,typeRoots:["node_modules/@types"],allowUmdGlobalAccess:!0}),s.languages.typescript.typescriptDefaults.setDiagnosticsOptions({noSemanticValidation:!1,noSyntaxValidation:!1}),fetch("https://cdn.jsdelivr.net/npm/@types/react@16.9.41/index.d.ts").then((async function(e){s.languages.typescript.typescriptDefaults.addExtraLib(await e.text(),"file:///node_modules/@react/types/index.d.ts")}));const o=document.getElementById("leftContainer"),r=document.getElementById("rightContainer"),l=(document.getElementById("leftEditor"),document.getElementById("rightEditor"),document.getElementById("leftTabs")),d=document.getElementById("rightTabs"),c=document.getElementById("splitView");c.addEventListener("click",(function(){r.classList.contains("hidden")?(r.classList.remove("hidden"),c.classList.add("orange")):(r.classList.add("hidden"),c.classList.remove("orange"),p.activeFile?.deactivate({right:!0}))}));const u=s.editor.create(o,{model:null,automaticLayout:!0,wrappingIndent:"indent",detectIndentation:!1}),p=s.editor.create(r,{model:null,automaticLayout:!0,wrappingIndent:"indent",detectIndentation:!1});o.addEventListener("drop",(function(e){e.preventDefault(),i.ZP.dragFile.activate({left:!0},!0)})),o.addEventListener("dragover",(function(e){e.preventDefault()})),r.addEventListener("drop",(function(e){e.preventDefault(),i.ZP.dragFile.activate({right:!0},!0)})),r.addEventListener("dragover",(function(e){e.preventDefault()}));var f="\n  declare namespace Compiler {\n\n    export interface Config {\n        input: string;\n        output: string;\n        format: Format;\n        target: 'last 2 edge versions' | 'ie 11' | string;\n        name?: string;\n        preCompilerOptions?: TransformOptions;\n        bundleOptions?: BundleOptions;\n        generateOptions?: GenerateOptions;\n        postCompilerOptions?: TransformOptions;\n        scripts: string[];\n    }\n\n    export type Format = 'amd' | 'cjs' | 'es' | 'iife' | 'umd' | 'css'\n\n    export interface BundleOptions {\n        /** The format of the generated bundle. */\n        format: Format\n        /** What export mode to use. Defaults to auto, which guesses your intentions based on what the `entry` module exports. */\n        exports?: 'auto' | 'default' | 'named' | 'none'\n        /** An ID to use for AMD/UMD bundles. */\n        moduleId?: string\n        /** The name to use for the module for UMD/IIFE bundles (required for bundles with exports). */\n        name?: string\n        /** Mapping of IDs → global variable names. Used for UMD/IIFE bundles. */\n        globals?: { [id: string]: string }\n        /**\n         * Function that takes an ID and returns a path, or Object of id: path pairs.\n         * Where supplied, these paths will be used in the generated bundle instead of the module ID, allowing you to (for example) load dependencies from a CDN.\n         */\n        paths?: ((id: string) => string) | { [id: string]: string }\n        /**\n         * The indent string to use, for formats that require code to be indented (AMD, IIFE, UMD).\n         * Can also be false (no indent), or true (the default – auto-indent)\n         */\n        indent?: string | boolean\n        /**\n         * Whether or not to add an 'interop block'. By default (interop: true).\n         * For safety's sake, Rollup will assign any external dependencies' default exports to a separate variable if it's necessary to distinguish between default and named exports.\n         * This generally only applies if your external dependencies were transpiled (for example with Babel) – if you're sure you don't need it, you can save a few bytes with interop: false.\n         */\n        interop?: boolean\n        /** A string to prepend to the bundle. */\n        banner?: string\n        /** A string to append to the bundle. */\n        footer?: string\n        /** A string prepended to the code inside of the format-specific wrapper */\n        intro?: string\n        /** A string appended to the code inside of the format-specific wrapper */\n        outro?: string\n        /**\n         * Whether to include the 'use strict' pragma at the top of generated non-ES6 bundles.\n         * Strictly-speaking (geddit?), ES6 modules are always in strict mode, so you shouldn't disable this without good reason.\n         */\n        strict?: boolean\n    }\n\n    export interface GenerateOptions extends BundleOptions {\n        /** Whether to generate a sourcemap. If true, the return value from `bundle.generate(...)` will include a map property */\n        sourcemap?: boolean\n        /**\n         * The location of the generated bundle. If this is an absolute path, all the sources paths in the sourcemap will be relative to it.\n         * The map.file property is the basename of sourcemapFile, as the location of the sourcemap is assumed to be adjacent to the bundle.\n         */\n        sourcemapFile?: string\n    }\n\n    export interface TransformOptions {\n        /**\n         * Specify which assumptions it can make about your code, to better optimize the compilation result. **NOTE**: This replaces the various `loose` options in plugins in favor of\n         * top-level options that can apply to multiple plugins\n         *\n         * @see https://babeljs.io/docs/en/assumptions\n         */\n        assumptions?: { [name: string]: boolean } | null | undefined;\n\n        /**\n         * Include the AST in the returned object\n         *\n         * Default: `false`\n         */\n        ast?: boolean | null | undefined;\n\n        /**\n         * Attach a comment after all non-user injected code\n         *\n         * Default: `null`\n         */\n        auxiliaryCommentAfter?: string | null | undefined;\n\n        /**\n         * Attach a comment before all non-user injected code\n         *\n         * Default: `null`\n         */\n        auxiliaryCommentBefore?: string | null | undefined;\n\n        /**\n         * Specify the \"root\" folder that defines the location to search for \"babel.config.js\", and the default folder to allow `.babelrc` files inside of.\n         *\n         * Default: `\".\"`\n         */\n        root?: string | null | undefined;\n\n        /**\n         * This option, combined with the \"root\" value, defines how Babel chooses its project root.\n         * The different modes define different ways that Babel can process the \"root\" value to get\n         * the final project root.\n         *\n         * @see https://babeljs.io/docs/en/next/options#rootmode\n         */\n        rootMode?: 'root' | 'upward' | 'upward-optional' | undefined;\n\n        /**\n         * The config file to load Babel's config from. Defaults to searching for \"babel.config.js\" inside the \"root\" folder. `false` will disable searching for config files.\n         *\n         * Default: `undefined`\n         */\n        configFile?: string | boolean | null | undefined;\n\n        /**\n         * Specify whether or not to use .babelrc and\n         * .babelignore files.\n         *\n         * Default: `true`\n         */\n        babelrc?: boolean | null | undefined;\n\n        /**\n         * Specify which packages should be search for .babelrc files when they are being compiled. `true` to always search, or a path string or an array of paths to packages to search\n         * inside of. Defaults to only searching the \"root\" package.\n         *\n         * Default: `(root)`\n         */\n        babelrcRoots?: boolean | MatchPattern | MatchPattern[] | null | undefined;\n\n        /**\n         * Toggles whether or not browserslist config sources are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json.\n         * This is useful for projects that use a browserslist config for files that won't be compiled with Babel.\n         *\n         * If a string is specified, it must represent the path of a browserslist configuration file. Relative paths are resolved relative to the configuration file which specifies\n         * this option, or to `cwd` when it's passed as part of the programmatic options.\n         *\n         * Default: `true`\n         */\n        browserslistConfigFile?: boolean | null | undefined;\n\n        /**\n         * The Browserslist environment to use.\n         *\n         * Default: `undefined`\n         */\n        browserslistEnv?: string | null | undefined;\n\n        /**\n         * By default `babel.transformFromAst` will clone the input AST to avoid mutations.\n         * Specifying `cloneInputAst: false` can improve parsing performance if the input AST is not used elsewhere.\n         *\n         * Default: `true`\n         */\n        cloneInputAst?: boolean | null | undefined;\n\n        /**\n         * Defaults to environment variable `BABEL_ENV` if set, or else `NODE_ENV` if set, or else it defaults to `\"development\"`\n         *\n         * Default: env vars\n         */\n        envName?: string | undefined;\n\n        /**\n         * If any of patterns match, the current configuration object is considered inactive and is ignored during config processing.\n         */\n        exclude?: MatchPattern | MatchPattern[] | undefined;\n\n        /**\n         * Enable code generation\n         *\n         * Default: `true`\n         */\n        code?: boolean | null | undefined;\n\n        /**\n         * Output comments in generated output\n         *\n         * Default: `true`\n         */\n        comments?: boolean | null | undefined;\n\n        /**\n         * Do not include superfluous whitespace characters and line terminators. When set to `\"auto\"` compact is set to `true` on input sizes of >500KB\n         *\n         * Default: `\"auto\"`\n         */\n        compact?: boolean | 'auto' | null | undefined;\n\n        /**\n         * The working directory that Babel's programmatic options are loaded relative to.\n         *\n         * Default: `\".\"`\n         */\n        cwd?: string | null | undefined;\n\n        /**\n         * Utilities may pass a caller object to identify themselves to Babel and\n         * pass capability-related flags for use by configs, presets and plugins.\n         *\n         * @see https://babeljs.io/docs/en/next/options#caller\n         */\n        caller?: TransformCaller | undefined;\n\n        /**\n         * This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }`\n         * which will use those options when the `envName` is `production`\n         *\n         * Default: `{}`\n         */\n        env?: { [index: string]: TransformOptions | null | undefined } | null | undefined;\n\n        /**\n         * A path to a `.babelrc` file to extend\n         *\n         * Default: `null`\n         */\n        extends?: string | null | undefined;\n\n        /**\n         * Filename for use in errors etc\n         *\n         * Default: `\"unknown\"`\n         */\n        filename?: string | null | undefined;\n\n        /**\n         * Filename relative to `sourceRoot`\n         *\n         * Default: `(filename)`\n         */\n        filenameRelative?: string | null | undefined;\n\n        /**\n         * An object containing the options to be passed down to the babel code generator, @babel/generator\n         *\n         * Default: `{}`\n         */\n        generatorOpts?: GeneratorOptions | null | undefined;\n\n        /**\n         * Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used\n         *\n         * Default: `null`\n         */\n        getModuleId?: ((moduleName: string) => string | null | undefined) | null | undefined;\n\n        /**\n         * ANSI highlight syntax error code frames\n         *\n         * Default: `true`\n         */\n        highlightCode?: boolean | null | undefined;\n\n        /**\n         * Opposite to the `only` option. `ignore` is disregarded if `only` is specified\n         *\n         * Default: `null`\n         */\n        ignore?: MatchPattern[] | null | undefined;\n\n        /**\n         * This option is a synonym for \"test\"\n         */\n        include?: MatchPattern | MatchPattern[] | undefined;\n\n\n\n        /**\n         * Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe)\n         *\n         * Default: `false`\n         */\n        minified?: boolean | null | undefined;\n\n        /**\n         * Specify a custom name for module ids\n         *\n         * Default: `null`\n         */\n        moduleId?: string | null | undefined;\n\n        /**\n         * If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules)\n         *\n         * Default: `false`\n         */\n        moduleIds?: boolean | null | undefined;\n\n        /**\n         * Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions\n         *\n         * Default: `(sourceRoot)`\n         */\n        moduleRoot?: string | null | undefined;\n\n        /**\n         * A glob, regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile\n         * a non-matching file it's returned verbatim\n         *\n         * Default: `null`\n         */\n        only?: MatchPattern[] | null | undefined;\n\n        /**\n         * Allows users to provide an array of options that will be merged into the current configuration one at a time.\n         * This feature is best used alongside the \"test\"/\"include\"/\"exclude\" options to provide conditions for which an override should apply\n         */\n        overrides?: TransformOptions[] | undefined;\n\n        /**\n         * An object containing the options to be passed down to the babel parser, @babel/parser\n         *\n         * Default: `{}`\n         */\n        parserOpts?: ParserOptions | null | undefined;\n\n        /**\n         * List of plugins to load and use\n         *\n         * Default: `[]`\n         */\n        plugins?: PluginItem[] | null | undefined;\n\n        /**\n         * List of presets (a set of plugins) to load and use\n         *\n         * Default: `[]`\n         */\n        presets?: PluginItem[] | null | undefined;\n\n        /**\n         * Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE**: This will not retain the columns)\n         *\n         * Default: `false`\n         */\n        retainLines?: boolean | null | undefined;\n\n        /**\n         * An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE**: This overrides the `comment` option when used\n         *\n         * Default: `null`\n         */\n        shouldPrintComment?: ((commentContents: string) => boolean) | null | undefined;\n\n        /**\n         * Set `sources[0]` on returned source map\n         *\n         * Default: `(filenameRelative)`\n         */\n        sourceFileName?: string | null | undefined;\n\n        /**\n         * If truthy, adds a `map` property to returned output. If set to `\"inline\"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `\"both\"`\n         * then a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!**\n         *\n         * Default: `false`\n         */\n        sourceMaps?: boolean | 'inline' | 'both' | null | undefined;\n\n        /**\n         * The root from which all sources are relative\n         *\n         * Default: `(moduleRoot)`\n         */\n        sourceRoot?: string | null | undefined;\n\n        /**\n         * Indicate the mode the code should be parsed in. Can be one of \"script\", \"module\", or \"unambiguous\". `\"unambiguous\"` will make Babel attempt to guess, based on the presence of ES6\n         * `import` or `export` statements. Files with ES6 `import`s and `export`s are considered `\"module\"` and are otherwise `\"script\"`.\n         *\n         * Default: `(\"module\")`\n         */\n        sourceType?: 'script' | 'module' | 'unambiguous' | null | undefined;\n\n        /**\n         * If all patterns fail to match, the current configuration object is considered inactive and is ignored during config processing.\n         */\n        test?: MatchPattern | MatchPattern[] | undefined;\n\n        /**\n         * Describes the environments you support/target for your project.\n         * This can either be a [browserslist-compatible](https://github.com/ai/browserslist) query (with [caveats](https://babeljs.io/docs/en/babel-preset-env#ineffective-browserslist-queries))\n         *\n         * Default: `{}`\n         */\n        targets?:\n        | string\n        | string[]\n        | {\n            esmodules?: boolean;\n            node?: Omit<string, 'current'> | 'current' | true;\n            safari?: Omit<string, 'tp'> | 'tp';\n            browsers?: string | string[];\n            android?: string;\n            chrome?: string;\n            deno?: string;\n            edge?: string;\n            electron?: string;\n            firefox?: string;\n            ie?: string;\n            ios?: string;\n            opera?: string;\n            rhino?: string;\n            samsung?: string;\n        };\n\n    }\n\n    export type MatchPattern = string | RegExp | ((filename: string | undefined, context: MatchPatternContext) => boolean);\n\n    export interface TransformCaller {\n        // the only required property\n        name: string;\n        // e.g. set to true by `babel-loader` and false by `babel-jest`\n        supportsStaticESM?: boolean | undefined;\n        supportsDynamicImport?: boolean | undefined;\n        supportsExportNamespaceFrom?: boolean | undefined;\n        supportsTopLevelAwait?: boolean | undefined;\n        // augment this with a \"declare module '@babel/core' { ... }\" if you need more keys\n    }\n\n    export interface MatchPatternContext {\n        envName: string;\n        dirname: string;\n        caller: TransformCaller | undefined;\n    }\n\n    export interface ConfigItem {\n        /**\n         * The name that the user gave the plugin instance, e.g. `plugins: [ ['env', {}, 'my-env'] ]`\n         */\n        name?: string | undefined;\n\n        /**\n         * The resolved value of the plugin.\n         */\n        value: object | ((...args: any[]) => any);\n\n        /**\n         * The options object passed to the plugin.\n         */\n        options?: object | false | undefined;\n\n        /**\n         * The path that the options are relative to.\n         */\n        dirname: string;\n\n        /**\n         * Information about the plugin's file, if Babel knows it.\n         *  *\n         */\n        file?:\n        | {\n            /**\n             * The file that the user requested, e.g. `\"@babel/env\"`\n             */\n            request: string;\n\n            /**\n             * The full path of the resolved file, e.g. `\"/tmp/node_modules/@babel/preset-env/lib/index.js\"`\n             */\n            resolved: string;\n        }\n        | null\n        | undefined;\n    }\n\n    export type PluginOptions = object | undefined | false;\n\n    export type PluginTarget = string | object | ((...args: any[]) => any);\n\n    export type PluginItem =\n        | ConfigItem\n        | PluginTarget\n        | [PluginTarget, PluginOptions]\n        | [PluginTarget, PluginOptions, string | undefined];\n\n\n    export interface GeneratorOptions {\n        /**\n         * Optional string to add as a block comment at the start of the output file.\n         */\n        auxiliaryCommentBefore?: string | undefined;\n\n        /**\n         * Optional string to add as a block comment at the end of the output file.\n         */\n        auxiliaryCommentAfter?: string | undefined;\n\n        /**\n         * Function that takes a comment (as a string) and returns true if the comment should be included in the output.\n         * By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment\n         * contains `@preserve` or `@license`.\n         */\n        shouldPrintComment?(comment: string): boolean;\n\n        /**\n         * Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).\n         * Defaults to `false`.\n         */\n        retainLines?: boolean | undefined;\n\n        /**\n         * Should comments be included in output? Defaults to `true`.\n         */\n        comments?: boolean | undefined;\n\n        /**\n         * Set to true to avoid adding whitespace for formatting. Defaults to the value of `opts.minified`.\n         */\n        compact?: boolean | 'auto' | undefined;\n\n        /**\n         * Should the output be minified. Defaults to `false`.\n         */\n        minified?: boolean | undefined;\n\n        /**\n         * Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.\n         */\n        concise?: boolean | undefined;\n\n        /**\n         * The type of quote to use in the output. If omitted, autodetects based on `ast.tokens`.\n         */\n        quotes?: 'single' | 'double' | undefined;\n\n        /**\n         * Used in warning messages\n         */\n        filename?: string | undefined;\n\n        /**\n         * Enable generating source maps. Defaults to `false`.\n         */\n        sourceMaps?: boolean | undefined;\n\n        /**\n         * The filename of the generated code that the source map will be associated with.\n         */\n        sourceMapTarget?: string | undefined;\n\n        /**\n         * A root for all relative URLs in the source map.\n         */\n        sourceRoot?: string | undefined;\n\n        /**\n         * The filename for the source code (i.e. the code in the `code` argument).\n         * This will only be used if `code` is a string.\n         */\n        sourceFileName?: string | undefined;\n\n        /**\n         * Set to true to run jsesc with \"json\": true to print \"©\" vs. \"©\";\n         */\n        jsonCompatibleStrings?: boolean | undefined;\n    }\n}";function h(e){const n=document.createElement("div");if(!e)return n;if(n.className=e.className??"",e.listeners)for(const t of e.listeners)n.addEventListener(t.type,t.listener);if(e.innerHTML&&(n.innerHTML=e.innerHTML),e.children)for(const t of e.children)n.appendChild(t);return e.parent&&e.parent.appendChild(n),n}s.languages.typescript.javascriptDefaults.addExtraLib(f),s.languages.typescript.typescriptDefaults.addExtraLib(f);class m{container;constructor(e,n){const t=this;this.container=h({className:"context-menu hidden",children:[h({innerHTML:`${e.icon()}<span class='tree-label-name'>${e.name()}</span>`}),document.createElement("HR"),...n.map((function(e){return h({className:"context-menu-action",innerHTML:e.icon+e.label,listeners:[{type:"click",listener:async function(){t.hide(),e.action()}}]})}))]})}show(e){g(),this.container.classList.remove("hidden"),this.container.style.top=e.clientY+"px",this.container.style.left=e.clientX+"px",this.container.getBoundingClientRect().bottom>window.innerHeight&&(this.container.style.top=e.clientY-this.container.offsetHeight+"px"),e.stopPropagation(),e.preventDefault()}hide(){this.container.classList.add("hidden")}}function g(){const e=document.getElementsByClassName("context-menu");for(const n of e)n.classList.add("hidden")}document.addEventListener("click",g),document.addEventListener("contextmenu",g);var _=__webpack_require__(659);class b{handle;model;modifiedModel;parentFolder;container;label;input;leftTab;rightTab;state;saveTimer;constructor(e,n){this.handle=e,this.parentFolder=n,this.state={loaded:n.state.loaded},this.container=h({className:"container file"})}name(){return this.handle.name}extension(){return this.name().split(".").pop()}path(){return this.parentFolder===i.ZP.rootFolder?this.name():this.parentFolder.path()+"/"+this.name()}language(){switch(this.extension()){case"html":case"hta":return"html";case"jsx":case"js":case"mjs":return"javascript";case"css":return"css";case"scss":return"scss";case"json":return"json";case"md":return"markdown";case"vb":case"vbs":case"bas":case"cls":return"vb";case"sql":return"sql";case"cs":return"cs";case"ts":case"tsx":return"typescript";case"txt":return"text";default:return null}}icon(){switch(this.language()){case"javascript":return'<i class="fa-brands fa-square-js"></i>';case"typescript":return'<i class="fa-brands fa-square-js typescript"></i>';case"css":return'<i class="fa-solid fa-palette"></i>';case"scss":return'<i class="fa-solid fa-palette scss"></i>';case"html":return'<i class="fa-solid fa-code"></i>';case"json":return'<i class="fa-solid fa-gear"></i>';case"sql":return'<i class="fa-solid fa-database"></i>';case"vb":return'<i class="fa-solid fa-scroll"></i>';case"text":return'<i class="fa-solid fa-font"></i>';case"markdown":return'<i class="fa-solid fa-book"></i>';default:return'<i class="fa-solid fa-file"></i>'}}async getText(){if(this.model)return this.model.getValue();{const e=await this.handle.getFile();return await e.text()}}async setText(e){if(this.model)return this.model.setValue(e);{const n=await this.handle.createWritable();await n.write(e),await n.close()}}async loadModel(){this.model&&this.unloadModel();const e=this,n=await this.getText();this.model=s.editor.createModel(n,this.language(),s.Uri.file(this.path())),this.model.onDidChangeContent((function(n){var t,a;t=e,a=n.isFlush?0:2e3,document.getElementById("autoSave").classList.add("orange"),document.getElementById("compileButton").classList.add("orange"),clearTimeout(w[t.path()]),w[t.path()]=setTimeout((async function(){document.getElementById("autoSave").children[0].classList.add("fa-flip"),y++,await t.save(),0==--y&&document.getElementById("autoSave").children[0].classList.remove("fa-flip"),delete w[t.path()],0==Object.keys(w).length&&document.getElementById("autoSave").classList.remove("orange")}),a)})),this.input.checked=!0}async loadTree(){return i.ZP.files[this.path()]=this,this.createTreeElement()}unloadModel(){this.deactivate({left:!0,right:!0}),this.leftTab?.remove(),this.leftTab=null,this.rightTab?.remove(),this.rightTab=null,this.model?.dispose(),this.model=void 0,this.input.checked=!1}async save(){if(!this.language()&&!confirm("File Type not supported. Okay to save?"))return;const e=await this.handle.createWritable();await e.write(this.model.getValue()),await e.close()}async remove(e){(e||confirm(`Are you sure you want to delete ${this.name()}`))&&(this.unloadModel(),delete i.ZP.files[this.path()],delete this.parentFolder.files[this.name()],this.container.remove(),await this.handle.remove({recursive:!0}))}async rename(){var e=prompt("New filename",this.name());if(e){if(this.parentFolder.files[e])return alert("File already exists with that name: "+e),!1;let n=this.input.checked,t=u.activeFile===this,a=p.activeFile===this;this.unloadModel(),delete i.ZP.files[this.path()],delete this.parentFolder.files[this.name()],await this.handle.move(e),this.container.remove(),await this.parentFolder.loadFile(this),n&&(await this.loadModel(),this.activate({left:t,right:a}))}}contextMenu(){const e=this;return new m(this,[..."javascript"===this.language()||"typescript"===this.language()?[{icon:'<i class="fa-solid fa-gear"></i>',label:"Compile",action:async function(){await(0,_.P6)(e)}}]:[],..."markdown"===this.language()?[{icon:'<i class="fa-solid fa-gear"></i>',label:"PreviewMarkdown",action:function(){}}]:[],{icon:'<i class="fa-solid fa-pencil"></i>',label:"Rename",action:async function(){await e.rename()}},{icon:'<i class="fa-solid fa-trash-can"></i>',label:"Delete",action:async function(){await e.remove()}}])}createTreeElement(){const e=this;this.container.innerHTML="",this.label=h({parent:this.container,className:"label",innerHTML:`${this.icon()}<span>${this.name()}</span>`,listeners:[{type:"click",listener:function(){e.activate({left:!0})}},{type:"contextmenu",listener:function(e){n.show(e)}}]}),this.label.draggable=!0,this.label.addEventListener("dragstart",(function(n){i.ZP.dragFile=e})),this.input=document.createElement("input"),this.input.type="checkbox",this.input.checked=!1,this.input.addEventListener("change",(async function(){e.input.checked?await e.loadModel():e.unloadModel()}));const n=this.contextMenu();return this.container.appendChild(this.input),this.container.appendChild(this.label),this.container.appendChild(n.container),this.container}async activate(e,n){this.input.checked||(this.input.checked=!0,await this.loadModel()),e.left&&(u.activeFile?.deactivate({left:!0}),u.setModel(this.model),u.restoreViewState(this.state.viewState),this.label.classList.add("active","left"),u.activeFile=this,this.leftTab?this.leftTab.classList.add("active"):this.createTab({left:!0})),e.right&&(p.activeFile?.deactivate({right:!0}),p.setModel(this.model),p.restoreViewState(this.state.viewState),this.label.classList.add("active","right"),p.activeFile=this,this.rightTab?this.rightTab.classList.add("active"):this.createTab({right:!0}))}deactivate(e){this.state.viewState=u.saveViewState(),e.left&&(this.label?.classList.remove("left"),u.activeFile=null,u.setModel(null),this.leftTab?.classList.remove("active")),e.right&&(this.label?.classList.remove("right"),p.activeFile=null,p.setModel(null),this.rightTab?.classList.remove("active")),p.activeFile!==this&&u.activeFile!==this&&this.label?.classList.remove("active")}createTab(e){const n=this,t=new m(this,[{icon:'<i class="fa-solid fa-circle-left"></i>',label:"Move Left",action:async function(){a.previousElementSibling&&a.parentNode.insertBefore(a,a.previousElementSibling)}},{icon:'<i class="fa-solid fa-circle-right"></i>',label:"Move Right",action:async function(){a.nextElementSibling&&a.parentNode.insertBefore(a,a.nextElementSibling)}},{icon:'<i class="fa-solid fa-xmark"></i>',label:"Close",action:async function(){a.remove(),n.deactivate(e),e.left&&(n.leftTab=null),e.right&&(n.rightTab=null)}}]),a=h({parent:this.container,className:"tab active",innerHTML:`${this.icon()}<span>${this.name()}</span>`,listeners:[{type:"click",listener:function(a){t.container.contains(a.target)||n.activate(e)}},{type:"contextmenu",listener:function(e){t.container.contains(e.target)||t.show(e)}}]});a.appendChild(t.container),e.left&&(this.leftTab=a,l.appendChild(a)),e.right&&(this.rightTab=a,d.appendChild(a))}async run(){}}const w={};var y=0;class v{handle;parentFolder;container;label;childrenContainer;fileContainer;folderContainer;files;folders;state;constructor(e,n){this.handle=e,this.parentFolder=n,this.state={expanded:!1,loaded:n?.state.loaded??!1},this.files={},this.folders={},this.container=h({className:"container folder"})}name(){return this.handle.name}path(){return this.parentFolder===i.ZP.rootFolder?this.name():this.parentFolder.path()+"/"+this.name()}icon(){return'<i class="fa-solid fa-folder"></i>'}contextMenu(){const e=this;return new m(this,[{icon:'<i class="fa-solid fa-file-circle-plus"></i>',label:"New File",action:async function(){(await e.newFile()).activate({left:!0}),e.expand()}},{icon:'<i class="fa-solid fa-folder-plus"></i>',label:"New Folder",action:async function(){await e.newFolder(),e.expand()}},{icon:'<i class="fa-solid fa-rotate"></i>',label:"Refresh",action:async function(){await e.reload()}},{icon:'<i class="fa-solid fa-circle-plus"></i>',label:"Load Models",action:async function(){await e.loadModels()}},{icon:'<i class="fa-solid fa-circle-minus"></i>',label:"Unload Models",action:async function(){await e.unloadModels()}},{icon:'<i class="fa-solid fa-trash-can"></i>',label:"Delete",action:async function(){await e.remove()}}])}createTreeElement(){const e=this;this.container.innerHTML="",this.label=h({parent:this.container,className:"label",listeners:[{type:"click",listener:function(){e.state.expanded?e.collapse():e.expand()}},{type:"contextmenu",listener:function(e){n.show(e)}}]}),this.childrenContainer=h({parent:this.container,className:"children hidden"}),this.folderContainer=h({parent:this.childrenContainer}),this.fileContainer=h({parent:this.childrenContainer});const n=this.contextMenu();return this.container.appendChild(n.container),this.collapse(),this.container}collapse(){this.label.innerHTML=`\n\t\t<i class='fa-solid fa-chevron-right'></i>\n\t\t<i class='fa-solid fa-folder'></i>\n\t\t<span class='tree-label-name'>${this.name()}</span>`,this.childrenContainer.classList.toggle("hidden",!0),this.state.expanded=!1}expand(){this.label.innerHTML=`\n\t\t<i class='fa-solid fa-chevron-down'></i>\n\t\t<i class='fa-solid fa-folder-open'></i>\n\t\t<span class='tree-label-name'>${this.name()}</span>`,this.childrenContainer.classList.toggle("hidden",!1),this.state.expanded=!0}async loadTree(){await this.unloadModels(),this.files={},this.folders={};const e=this.createTreeElement();for await(const e of this.handle.values())"directory"==e.kind?this.loadFolder(new v(e,this)):this.loadFile(new b(e,this));return e}async loadFolder(e){this.folders[e.name()]=e;let n=Object.keys(this.folders).sort(),t=n.indexOf(e.name())+1,a=this.folders[n[t]];const i=await e.loadTree();this.folderContainer.insertBefore(i,a?.container)}async loadFile(e){this.files[e.name()]=e;let n=Object.keys(this.files).sort(),t=n.indexOf(e.name())+1,a=this.files[n[t]];const i=await e.loadTree();this.fileContainer.insertBefore(i,a?.container)}async loadModels(){for await(const[e,n]of Object.entries(this.files))n.language()&&await n.loadModel();for await(const[e,n]of Object.entries(this.folders))"!"!==n.name()[0]&&await n.loadModels()}async unloadModels(){for await(const[e,n]of Object.entries(this.files))n.unloadModel();for await(const[e,n]of Object.entries(this.folders))await n.unloadModels()}async reload(){await this.loadTree(),this.state.expanded?this.collapse():this.expand()}async remove(e){if(e||confirm(`Are you sure you want to delete ${this.name()}`)){for await(const[e,n]of Object.entries(this.files))await n.remove(!0);for await(const[e,n]of Object.entries(this.folders))await n.remove(!0);this.container.remove(),await this.handle.remove({recursive:!0})}}async newFile(e){const n=e??prompt("Name of new file with extension");if(!n)return null;const t=n.split("/"),a=t.pop(),i=t.join("/");var s=await this.newFolder(i);if(!a)return null;try{var o=await s.handle.getFileHandle(a);return s.files[a]}catch(e){o=await s.handle.getFileHandle(a,{create:!0});var r=new b(o,s);return await s.loadFile(r),r}}async newFolder(e){const n=e??prompt("Name of new folder");if(!n)return this;const t=n.split("/"),a=t.shift(),i=t.join("/");try{var s=await this.handle.getDirectoryHandle(a),o=this.folders[a];return await o.newFolder(i)}catch(e){return s=await this.handle.getDirectoryHandle(a,{create:!0}),o=new v(s,this),await this.loadFolder(o),await o.newFolder(i)}}}window.addEventListener("error",(function(e){console.log(e.message)})),console.log=function(e){document.getElementById("log").innerText+="\n"+e,document.getElementById("viewLog").classList.add("orange")};const E=document.getElementById("logContainer");document.getElementById("viewLog").addEventListener("click",(function(){E.classList.toggle("hidden"),document.getElementById("viewLog").classList.remove("orange")})),E.addEventListener("click",(function(e){e.target===E&&(E.classList.add("hidden"),document.getElementById("log").innerHTML="")})),document.getElementById("openFolder").addEventListener("click",(async function(){try{const e=await window.showDirectoryPicker();await async function(e){return"granted"===await e.queryPermission({mode:"readwrite"})||"granted"===await e.requestPermission({mode:"readwrite"})}(e),i.ZP.rootFolder=new v(e),document.title=i.ZP.rootFolder.name();const n=document.getElementById("tree");n.innerHTML="",n.appendChild(await i.ZP.rootFolder.loadTree()),await i.ZP.rootFolder.loadModels()}catch(e){console.log(e)}}))})()})();